// Placeholder metadata file for dynamic artist pages\n\nimport { siteConfig } from \'../../../lib/site\';\n// Import other necessary modules like usePageMeta and tagToImageMap\n// import { usePageMeta } from \'../../../lib/usePageMeta\';\n// import { metaConfig } from \'../../../lib/metaConfig\';\n// import { tagToImageMap } from \'../../../lib/tagToImageMap\';\n\nexport async function generateMetadata({\n  params,\n  searchParams,\n}: { \n  params: { slug: string }; // Define the expected dynamic parameter\n  searchParams: { [key: string]: string | string[] | undefined };\n}) {\n  const artistSlug = params.slug; // Access the dynamic slug\n\n  // TODO: Fetch artist-specific data and metadata based on artistSlug\n  // You would typically use your data fetching logic here (e.g., from database)\n  const artistData = null; // Replace with actual data fetching\n\n  const title = artistData?.title || \`Artist: ${artistSlug}\` || siteConfig.name;\n  const description = artistData?.description || \`Details about artist ${artistSlug}.\` || siteConfig.description;\n\n  // Construct the URL for the dynamic OG image API route\n  const encodedTitle = encodeURIComponent(title);\n  // TODO: Extract tags from artistData if available\n  const tagString = \'\'; // Replace with actual tags if available\n  const dynamicOgImageUrl = `${siteConfig.url}/api/og-image?title=${encodedTitle}&tags=${encodeURIComponent(tagString)}`;\n\n  const imageUrl = artistData?.og_image_url || dynamicOgImageUrl || siteConfig.ogImage;\n\n  return {\n    title: title,\n    description: description,\n    openGraph: {\n      title: title,\n      description: description,\n      url: `${siteConfig.url}/artists/${artistSlug}`,\n      images: [{ url: imageUrl }],\n    },\n    twitter: {\n      card: \'summary_large_image\',\n      title: title,\n      description: description,\n      images: [imageUrl],\n    },\n  };\n}\n 